Narrabot... the big picture...

NOTE: some of the text here is recopied from other parts of the program, so that it can all be read in one place.
      since there will be reduntant text, it's best to read it only from here. The 'notes' in RB files are for reference when
      working on a given rb file (to avoid having to look back here)

NOTE 2: It's worth taking a look at the program_diagram.jpeg to get a more visual sense of how it all works

THE USER EXPERIENCE or CLI.rb

CLI SCREEN 1
  User sees story collection names:
    Choose the number associated with the title:
    1) Aesop's Fables
    2) Hans Christian Andersen
    3) Brother's Grimm
    4) Japanese Folktales
    5) Zen Koans

CLI SCREEN 2
  User sees story_collection_contents
    can see all of them
      then user chooses a story
      or back to main menu
    can see contents in increments of 10
      then user chooses next increment of 10
      or chooses a story
      or back to main menu
    can see randomized selection of 10
      then user chooses next increment of 10
      or chooses a story
      or back to main menu
    can ask narrabot to skip selection and choose a random story
      a random story is selected

    BONUS user alternatively prompted: "Not sure what you want to listen to?  Tell me about yourself."
      user then prompted to type some text (this is more like a magic trick)
      after typing some text... the computer will prompt user "I've got just the story for you."
      and it will switch to the Zen Koans Story Collection and pick a Koan at Random (it's essentially a magic 8 ball)

CLI SCREEN 3
  User sees ascii animation of the bonfire (the gif to be converted to ascii and associated tutorials is listed in flair.rb)
  after a moment or two (use the timer)... the TTS (text to speech gem) begins to read text_from_each_story
    NOTE since some of the stories are long, perhaps text_from_each_story can determine the length of the story (by word count)
      and warn the user that the story is HOWEVER_MANY_WORDS_LONG.  AND... at 10% story mark (give or take) it will ask if it should continue
      or choose a different story.

      BONUS methods? Since Aesop's has morals -- perhaps the interface could be 'playful' and when prompting whether or not it should continue...
      it could offer the alternative of "Just get to the point"

CLI SCREEN 4
  User has option to return to same collection (CLI SCREEN 2) or return to CLI SCREEN 1 or EXIT.

"SUPPORTING CAST AND CREW"
  flair.rb (plays ascii animation... there will be a flair folder to hold ascii frames. notes to do this in flair.rb)
  scraper.rb (has 3 methods)
          1) it returns the name of each constant collection (although this is just hardcoded... seems pointless to scrape ONE single 'table of contents' via code when you have to type the name of variable anyways)
          2) it scrapes the CONSTANT and returns STORY TITLES and STORY LINKS which story_collection_contents turns into an object
               NOTE: the Titles and Links will go into the appropriate object in story_collection_contents...
                 the name of the collection will be hardcoded to correspond with the variable
                     aesops_table_of_contents = "Aesop's Fables"
                     hans_tables_of_contents = "Hans Christian Andersen Stories"
                     etc...
             This method is "invoked" when a hardcored story collection is selected. (see program_diagram)
             When the story collection is selected from the first CLI screen it scrapes on demand (in real time)
             The story_collection_contents object reveals the contents (so code to reveal contents is there, but data is pushed into that object from here)
          3) it scrapes the link given (the story chosen) for text...
               IN OTHER WORDS: when a story is selected from the table of contents (which is scraped in method 2)... this method (3) scrapes on demand the text for that story
  story_collection_contents.rb
          each CLI menu option is hardcoded
            if that menu option is selected it invokes customized scraper methods 1 and 2
          allows the user to choose a story and invokes text_from_each_story.rb
  text_from_each_story.rb
          invokes scraper.rb method 3 to get the text
          also has methods to prompt user whether to continue or get to the point
            NOTE: not sure if bad practice to include multiple classes in one file, but thinking each story collection might have its own class
            NOTE 2: this would probably change overall structure, but that might be something for refactoring? ALSO...
